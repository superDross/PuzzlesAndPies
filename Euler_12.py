''' Euler 12


The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be:
    1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
    
The first ten terms would be:
    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
'''
from math import sqrt
import numpy as np

def find_factors(n):
    ''' Shamefully pilfered from 
        http://tiny.cc/PyFactorCode
    '''
    factors = set()
    for x in range(1, int(sqrt(n)) + 1):
        if n % x == 0:
            factors.add(x)
            factors.add(n//x)
    return sorted(factors)


# add the natural sequence of all numbers to x; get the triangle number of x
tri_num = lambda x: np.sum(np.arange(1,x+1))

# vectorize allows one to apply a function to a list, sort of like numpys version of map
seq = np.vectorize(tri_num)

# triangle numbers upto x
tri_seq = seq(range(1, 100000))


for x in tri_seq:
    f = find_factors(x)
    if len(f) > 500:
        print(x)
        break

# 76576500



