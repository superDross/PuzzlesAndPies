''' Euler 12

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be:
    1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
    
The first ten terms would be:
    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?


NOTE:

Factors; numbers which you multiply to get another number 
         e.g. 2 and 3 in 2x3=6 are factors of 12
'''
from math import sqrt
import numpy as np


def triangle_numbers(x, y):
    ''' Get all triangle numbers 
        from a given range.
    '''
    tri_num = lambda x: np.sum(np.arange(1,x+1))
    seq = np.vectorize(tri_num)
    tri_seq = seq(range(x, y))
    return tri_seq


def find_factors(n):
    ''' Get all factor numbers
        of n.
        
        Shamefully pilfered from 
        http://tiny.cc/PyFactorCode
    '''
    factors = set()
    for x in range(1, int(sqrt(n)) + 1):
        if n % x == 0:
            factors.add(x) # factor 1
            factors.add(n//x) # factor 2
    return sorted(factors)


def main():
    for x in triangle_numbers(1, 100000):
        f = find_factors(x)
        if len(f) > 500:
            return x


# 76576500
answer = main()
print(answer)


