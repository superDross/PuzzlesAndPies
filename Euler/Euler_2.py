''' Euler 2

Each new term in the Fibonacci sequence is generated by adding
the previous two terms. By starting with 1 and 2, the first 10
terms will be:

    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values
do not exceed four million, find the sum of the even-valued terms.
'''
import numpy as np
import time


# NumPy
def fibonacci_np(x):
    n = np.arange(x + 1)[1:]
    for i in range(x - 2):
        n[i + 2] = n[i] + n[i + 1]
    return n


def sum_of_even_fibonacci_np():
    f = fibonacci_np(100)
    even = f[(f > 0) & (f <= 4000000) & (f % 2 == 0)]
    return np.sum(even)


# Standard Python
def fibonacci(x, maximum=4000000):
    n = []
    i = 1
    while all([x > 0 and x <= maximum for x in n]):
        n += [x for x in range(i, i + 4)]
        n[i + 2] = n[i] + n[i + 1]
        i += 1
    return n[:i + 1]


def sum_of_even_fibonacci():
    f = fibonacci(100)
    even = [x for x in f if x % 2 == 0]
    total = sum(even)
    return total


# Answer = 4613732
# Standard
t0 = time.time()
answer = sum_of_even_fibonacci()
t1 = time.time()

# NumPy
answer_np = sum_of_even_fibonacci_np()
t2 = time.time()

print('Standard:\t', answer, '\n',
      '{:.3e}'.format(t1-t0), 'Seconds\n')
print('NumPy:\t', answer, '\n',
      '{:.3e}'.format(t2-t1), 'Seconds')
